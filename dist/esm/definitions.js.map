{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC;AAmXxC;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,UAqBX;AArBD,WAAY,UAAU;IACpB;;OAEG;IACH,yCAAO,CAAA;IACP;;OAEG;IACH,yCAAO,CAAA;IACP;;OAEG;IACH,iDAAW,CAAA;IACX;;OAEG;IACH,2CAAQ,CAAA;IACR;;OAEG;IACH,yCAAO,CAAA;AACT,CAAC,EArBW,UAAU,KAAV,UAAU,QAqBrB;AAED;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,UAaX;AAbD,WAAY,UAAU;IACpB;;OAEG;IACH,gDAAW,CAAA;IACX;;OAEG;IACH,iDAAW,CAAA;IACX;;OAEG;IACH,+CAAU,CAAA;AACZ,CAAC,EAbW,UAAU,KAAV,UAAU,QAarB","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\r\n\r\nimport type { PermissionState, PluginListenerHandle } from '@capacitor/core';\r\n\r\nexport type PresentationOption = 'badge' | 'sound' | 'alert' | 'criticalAlert';\r\n\r\ndeclare module '@capacitor/cli' {\r\n  export interface PluginsConfig {\r\n    /**\r\n     * On iOS you can configure the way the push notifications are displayed when the app is in foreground.\r\n     */\r\n    FirebaseMessaging?: {\r\n      /**\r\n       * This is an array of strings you can combine. Possible values in the array are:\r\n       *   - `badge`: badge count on the app icon is updated (default value)\r\n       *   - `sound`: the device will ring/vibrate when the push notification is received\r\n       *   - `alert`: the push notification is displayed in a native dialog\r\n       *   - `criticalAlert`: the push notification is displayed in a native dialog and bypasses the mute switch\r\n       *\r\n       * An empty array can be provided if none of the options are desired.\r\n       *\r\n       * Only available for iOS.\r\n       *\r\n       * @example [\"badge\", \"sound\", \"alert\"]\r\n       * @default [\"badge\", \"sound\", \"alert\"]\r\n       * @since 0.2.2\r\n       */\r\n      presentationOptions: PresentationOption[];\r\n    };\r\n  }\r\n}\r\n\r\nexport interface FirebaseMessagingPlugin {\r\n  /**\r\n   * Check permission to receive push notifications.\r\n   *\r\n   * On **Android**, this method only needs to be called on Android 13+.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  checkPermissions(): Promise<PermissionStatus>;\r\n  /**\r\n   * Request permission to receive push notifications.\r\n   *\r\n   * On **Android**, this method only needs to be called on Android 13+.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  requestPermissions(): Promise<PermissionStatus>;\r\n  /**\r\n   * Checks if all required APIs exist.\r\n   *\r\n   * Always returns `true` on Android and iOS.\r\n   *\r\n   * @since 0.3.1\r\n   */\r\n  isSupported(): Promise<IsSupportedResult>;\r\n  /**\r\n   * Register the app to receive push notifications.\r\n   * Returns a FCM token that can be used to send push messages to that Messaging instance.\r\n   *\r\n   * This method also re-enables FCM auto-init.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  getToken(options?: GetTokenOptions): Promise<GetTokenResult>;\r\n  /**\r\n   * Delete the FCM token and unregister the app to stop receiving push notifications.\r\n   * Can be called, for example, when a user signs out.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  deleteToken(): Promise<void>;\r\n  /**\r\n   * Get a list of notifications that are visible on the notifications screen.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  getDeliveredNotifications(): Promise<GetDeliveredNotificationsResult>;\r\n  /**\r\n   * Remove specific notifications from the notifications screen.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  removeDeliveredNotifications(\r\n    options: RemoveDeliveredNotificationsOptions,\r\n  ): Promise<void>;\r\n  /**\r\n   * Remove all notifications from the notifications screen.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  removeAllDeliveredNotifications(): Promise<void>;\r\n  /**\r\n   * Subscribes to topic in the background.\r\n   *\r\n   * Only available for Android and iOS.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  subscribeToTopic(options: SubscribeToTopicOptions): Promise<void>;\r\n  /**\r\n   * Unsubscribes from topic in the background.\r\n   *\r\n   * Only available for Android and iOS.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  unsubscribeFromTopic(options: UnsubscribeFromTopicOptions): Promise<void>;\r\n  /**\r\n   * Create a notification channel.\r\n   *\r\n   * Only available for Android (SDK 26+).\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  createChannel(options: CreateChannelOptions): Promise<void>;\r\n  /**\r\n   * Delete a notification channel.\r\n   *\r\n   * Only available for Android (SDK 26+).\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  deleteChannel(options: DeleteChannelOptions): Promise<void>;\r\n  /**\r\n   * List the available notification channels.\r\n   *\r\n   * Only available for Android (SDK 26+).\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  listChannels(): Promise<ListChannelsResult>;\r\n  /**\r\n   * Called when a new FCM token is received.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  addListener(\r\n    eventName: 'tokenReceived',\r\n    listenerFunc: TokenReceivedListener,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n  /**\r\n   * Called when a new push notification is received.\r\n   *\r\n   * On **Android**, this listener is called for every push notification if the app is in the _foreground_.\r\n   * If the app is in the _background_, then this listener is only called on data push notifications.\r\n   * See https://firebase.google.com/docs/cloud-messaging/android/receive#handling_messages for more information.\r\n   *\r\n   * On **iOS**, this listener is called for every push notification if the app is in the _foreground_.\r\n   * If the app is in the _background_, then this listener is only called for silent push notifications (messages with the `content-available` key).\r\n   * See https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html for more information.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  addListener(\r\n    eventName: 'notificationReceived',\r\n    listenerFunc: NotificationReceivedListener,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n  /**\r\n   * Called when a new push notification action is performed.\r\n   *\r\n   * Only available for Android and iOS.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  addListener(\r\n    eventName: 'notificationActionPerformed',\r\n    listenerFunc: NotificationActionPerformedListener,\r\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\r\n  /**\r\n   * Remove all listeners for this plugin.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  removeAllListeners(): Promise<void>;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface PermissionStatus {\r\n  /**\r\n   * @since 0.2.2\r\n   */\r\n  receive: PermissionState;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface GetTokenOptions {\r\n  /**\r\n   * Your VAPID public key, which is required to retrieve the current registration token on the web.\r\n   *\r\n   * Only available for Web.\r\n   */\r\n  vapidKey?: string;\r\n  /**\r\n   * The service worker registration for receiving push messaging.\r\n   * If the registration is not provided explicitly, you need to have a `firebase-messaging-sw.js` at your root location.\r\n   *\r\n   * Only available for Web.\r\n   */\r\n  serviceWorkerRegistration?: ServiceWorkerRegistration;\r\n}\r\n\r\n/**\r\n * @since 0.3.1\r\n */\r\nexport interface IsSupportedResult {\r\n  /**\r\n   * @since 0.3.1\r\n   */\r\n  isSupported: boolean;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface GetTokenResult {\r\n  /**\r\n   * @since 0.2.2\r\n   */\r\n  token: string;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface GetDeliveredNotificationsResult {\r\n  /**\r\n   * @since 0.2.2\r\n   */\r\n  notifications: Notification[];\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface RemoveDeliveredNotificationsOptions {\r\n  /**\r\n   * @since 0.4.0\r\n   */\r\n  notifications: Notification[];\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface SubscribeToTopicOptions {\r\n  /**\r\n   * The name of the topic to subscribe.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  topic: string;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface UnsubscribeFromTopicOptions {\r\n  /**\r\n   * The name of the topic to unsubscribe from.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  topic: string;\r\n}\r\n\r\n/**\r\n * @since 1.4.0\r\n */\r\nexport type CreateChannelOptions = Channel;\r\n\r\n/**\r\n * @since 1.4.0\r\n */\r\nexport interface DeleteChannelOptions {\r\n  /**\r\n   * The channel identifier.\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  id: string;\r\n}\r\n\r\n/**\r\n * @since 1.4.0\r\n */\r\nexport interface ListChannelsResult {\r\n  channels: Channel[];\r\n}\r\n\r\n/**\r\n * @since 1.4.0\r\n */\r\nexport interface Channel {\r\n  /**\r\n   * The description of this channel (presented to the user).\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  description?: string;\r\n  /**\r\n   * The channel identifier.\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  id: string;\r\n  /**\r\n   * The level of interruption for notifications posted to this channel.\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  importance?: Importance;\r\n  /**\r\n   * The light color for notifications posted to this channel.\r\n   *\r\n   * Only supported if lights are enabled on this channel and the device\r\n   * supports it.\r\n   *\r\n   * Supported color formats are `#RRGGBB` and `#RRGGBBAA`.\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  lightColor?: string;\r\n  /**\r\n   * Whether notifications posted to this channel should display notification\r\n   * lights, on devices that support it.\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  lights?: boolean;\r\n  /**\r\n   * The name of this channel (presented to the user).\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  name: string;\r\n  /**\r\n   * The sound that should be played for notifications posted to this channel.\r\n   *\r\n   * Notification channels with an importance of at least `3` should have a\r\n   * sound.\r\n   *\r\n   * The file name of a sound file should be specified relative to the android\r\n   * app `res/raw` directory.\r\n   *\r\n   * @since 1.4.0\r\n   * @example \"jingle.wav\"\r\n   */\r\n  sound?: string;\r\n  /**\r\n   * Whether notifications posted to this channel should vibrate.\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  vibration?: boolean;\r\n  /**\r\n   * The visibility of notifications posted to this channel.\r\n   *\r\n   * This setting is for whether notifications posted to this channel appear on\r\n   * the lockscreen or not, and if so, whether they appear in a redacted form.\r\n   *\r\n   * @since 1.4.0\r\n   */\r\n  visibility?: Visibility;\r\n}\r\n\r\n/**\r\n * The importance level.\r\n *\r\n * For more details, see the [Android Developer Docs](https://developer.android.com/reference/android/app/NotificationManager#IMPORTANCE_DEFAULT)\r\n *\r\n * @since 1.4.0\r\n */\r\nexport enum Importance {\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  Min = 1,\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  Low = 2,\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  Default = 3,\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  High = 4,\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  Max = 5,\r\n}\r\n\r\n/**\r\n * The notification visibility.\r\n *\r\n * For more details, see the [Android Developer Docs](https://developer.android.com/reference/androidx/core/app/NotificationCompat#VISIBILITY_PRIVATE())\r\n *\r\n * @since 1.4.0\r\n */\r\nexport enum Visibility {\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  Secret = -1,\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  Private = 0,\r\n  /**\r\n   * @since 1.4.0\r\n   */\r\n  Public = 1,\r\n}\r\n\r\n/**\r\n * Callback to receive the token received event.\r\n *\r\n * @since 0.2.2\r\n */\r\nexport type TokenReceivedListener = (event: TokenReceivedEvent) => void;\r\n\r\n/**\r\n * Callback to receive the notification received event.\r\n *\r\n * @since 0.2.2\r\n */\r\nexport type NotificationReceivedListener = (\r\n  event: NotificationReceivedEvent,\r\n) => void;\r\n\r\n/**\r\n * Callback to receive the notification action performed event.\r\n *\r\n * @since 0.2.2\r\n */\r\nexport type NotificationActionPerformedListener = (\r\n  event: NotificationActionPerformedEvent,\r\n) => void;\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface TokenReceivedEvent {\r\n  /**\r\n   * @since 0.2.2\r\n   */\r\n  token: string;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface NotificationReceivedEvent {\r\n  /**\r\n   * @since 0.2.2\r\n   */\r\n  notification: Notification;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface NotificationActionPerformedEvent {\r\n  /**\r\n   * The action performed on the notification.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  actionId: string;\r\n  /**\r\n   * Text entered on the notification action.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  inputValue?: string;\r\n  /**\r\n   * The notification in which the action was performed.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  notification: Notification;\r\n}\r\n\r\n/**\r\n * @since 0.2.2\r\n */\r\nexport interface Notification {\r\n  /**\r\n   * The notification payload.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  body?: string;\r\n  /**\r\n   * The action to be performed on the user opening the notification.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  clickAction?: string;\r\n  /**\r\n   * Any additional data that was included in the push notification payload.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  data?: unknown;\r\n  /**\r\n   * The notification identifier.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The URL of an image that is downloaded on the device and displayed in the notification.\r\n   *\r\n   * Only available for Web.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  image?: string;\r\n  /**\r\n   * Deep link from the notification.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  link?: string;\r\n  /**\r\n   * The notification subtitle.\r\n   *\r\n   * Only available for iOS.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  subtitle?: string;\r\n  /**\r\n   * The notification string identifier.\r\n   *\r\n   * Only available for Android.\r\n   *\r\n   * @since 0.4.0\r\n   */\r\n  tag?: string;\r\n  /**\r\n   * The notification title.\r\n   *\r\n   * @since 0.2.2\r\n   */\r\n  title?: string;\r\n}\r\n"]}